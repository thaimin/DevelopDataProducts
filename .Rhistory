install.packages("rattle", repos="http://rattle.togaware.com", type="source”)
install.packages("rattle")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
# Predicting with trees
modFit <- train(Species ~ ., method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, cex=.8)
text(modFit$finalModel, use.n=TRUE, cex=.5)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, cex=.5)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
# Predicting with trees
modFit <- train(Species ~ ., method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, cex=.7)
library(rattle)
fancyRpartPlot(modFit)
version
install.packages("RGtk2")
install.packages("RGtk2")
q()
install.packages(RGtk2)
install.packages(Gtk2)
install.packages("RGtk2")
install.packages("RGtk2", dependencies=TRUE)
install.packages("rattle", dependencies=TRUE)
q()
install.packages("RGtk2", dependencies=TRUE)
install.packages("rattle", dependencies=TRUE, type = "source")
install.packages("RGtk2", type="source")
install.packages("rattle", type="source")
q()
setwd("~/Desktop/Coursera/predmachlearn-033/assignment")
train_data <- read.table("pml-training.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
test_data <- read.table("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
isNA <- sapply(train_data, function(x) any(is.na(x)))
isPredictor <- grepl("belt|arm|dumbbell|classe", names(train_data))
train_data <- train_data[, !isNA & isPredictor]
library(caret)
inTrain <- createDataPartition(y = train_data$classe, p = 0.6, list = FALSE)
training <- train_data[inTrain,]
testing <- train_data[-inTrain,]
dim(training); dim(testing)
modFit <- train(classe ~ ., data = training, method = "rpart")
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, cex=.8)
results <- predict(modFit, newdata = testing)
confusionMatrix(results, train_data$classe[-inTrain])
library(randomForest)
modFit_RF <- randomForest(classe ~ ., data = training)
print(modFit_RF)
plot(modFit_RF, uniform=TRUE, main="Random Forest")
results_RF <- predict(modFit_RF, newdata = testing)
confusionMatrix(results_RF, train_data$classe[-inTrain])
results <- predict(modFit, newdata = testing[,-53])
confusionMatrix(results, train_data$classe[-inTrain])
names(testing[,-53])
names(testing)
confusionMatrix(results, testing$classe)
results_RF <- predict(modFit_RF, newdata = testing[,-53])
confusionMatrix(results_RF, testing$classe)
names(test_data)
test_data <- test_data[, isPredictor]
names(test_data)
names(test_data) == "classe"
train_data <- read.table("pml-training.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
test_data <- read.table("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
names(train_data)
names(test_data)
head(test_data)
head(train_data)
names(train_data)
names(test_data)
?rep
rep("A",20)
setwd("~/Desktop/Coursera/predmachlearn-033/assignment/submission")
train_data <- read.table("pml-training.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
test_data <- read.table("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
train_data <- read.table("pml-training.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
setwd("~/Desktop/Coursera/predmachlearn-033/assignment")
train_data <- read.table("pml-training.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
test_data <- read.table("pml-testing.csv", header = TRUE, sep = ",", na.strings = c("NA",""))
isNA <- sapply(train_data, function(x) any(is.na(x)))
isPredictor <- grepl("belt|arm|dumbbell|classe", names(train_data))
train_data <- train_data[, !isNA & isPredictor]
library(caret)
inTrain <- createDataPartition(y = train_data$classe, p = 0.6, list = FALSE)
training <- train_data[inTrain,]
testing <- train_data[-inTrain,]
dim(training); dim(testing)
library(randomForest)
modFit_RF <- randomForest(classe ~ ., data = training)
print(modFit_RF)
plot(modFit_RF, uniform=TRUE, main="Random Forest")
results_RF <- predict(modFit_RF, newdata = testing)
confusionMatrix(results_RF, testing$classe)
answers <- predict(modFit, testing)
answers <- predict(modFit, newdata = testing)
answers <- predict(modFit_RF, newdata = testing)
answer
answers
source("pml_write_files.R")
pml_write_files(answers)
answers <- predict(modFit_RF, newdata = test_data)
answers
source("pml_write_files.R")
pml_write_files(answers)
setwd("~/Desktop/Coursera/devdataprod-035/assignment")
library(shiny)
library(ggplot2)
library(caret)
data(iris)
runApp()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(iris)
iris
table(iris)
head(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(training[,1])
dim(training[1,1])
dim(training[1])
dim(training[1,0])
dim(training[1])
dim(training[1,1])
dim(training[1])
class(dim(training[1]))
dim(training[0])
dim(training[2])
dim(training[3])
dim(training[4])
dim(training)
dim(training[,])
dim(training[1,])
dim(training[2,])
dim(training[20,])
dim(training[,1])
dim(training[1])
dim(training[1][1])
dim(training[1][2])
dim(training[1][0])
dim(training)[1]
shiny::runApp()
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(randomForest)
modFit <- randomForest(Species ~ ., data = training)
modFit
plot(modFit)
modFit <- randomForest(Species ~ ., data = training, ntree = 1)
plot(modFit)
modFit <- randomForest(Species ~ ., data = training, ntree = 10)
plot(modFit)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
qplot(Petal.Length, Sepal.Length, colour=Species, data=training)
qplot(modFit)
plot(modFit)
pred <- predict(modFit, testing)
modFit <- randomForest(Species ~ ., data = training, ntree = 10)
pred <- predict(modFit, testing)
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="Predictions Accuracy")
testing$predRight <- pred==testing$Species
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="Predictions Accuracy")
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="Predictions Accuracy")
?confusionMatrix
names(pred)
confusionMatrix(pred, testing$Species)
cm <- confusionMatrix(pred, testing$Species)
cm$positive
cm$overall
cm$overall[1]
modFit <- randomForest(Species ~ ., data = training, ntree = 100)
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Species
# plot accuracy
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="Predictions Accuracy")
# confusion matrix accuracy
cm <- confusionMatrix(pred, testing$Species)
cm$overall[1]
?sliderInput
?textOutput
shiny::runApp()
shiny::runApp()
as.double("0.8")
as.integer("0.8")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
browser()
options(shiny.error = browser)
shiny::runApp()
browser()
options(shiny.fullstacktrace = TRUE)
runApp()
q
stderr()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
